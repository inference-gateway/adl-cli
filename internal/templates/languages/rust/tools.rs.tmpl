use serde_json::{Value, json};
use tracing::info;

/// Example tool: Get current time
pub fn get_current_time(_args: Value) -> Result<Value, Box<dyn std::error::Error>> {
    info!("Getting current time");
    
    let result = json!({
        "time": "2025-01-02T12:00:00Z",
        "timestamp": 1735819200
    });
    
    Ok(result)
}

/// Example tool: Echo message
pub fn echo_message(args: Value) -> Result<Value, Box<dyn std::error::Error>> {
    info!("Echoing message");
    
    let message = args.get("message")
        .and_then(|v| v.as_str())
        .unwrap_or("No message provided");
    
    let result = json!({
        "echo": message,
        "length": message.len()
    });
    
    Ok(result)
}

/// Example async tool: Simulated API call
pub async fn fetch_data(args: Value) -> Result<Value, Box<dyn std::error::Error>> {
    info!("Fetching data");
    
    let endpoint = args.get("endpoint")
        .and_then(|v| v.as_str())
        .unwrap_or("default");
    
    tokio::time::sleep(tokio::time::Duration::from_millis(100)).await;
    
    let result = json!({
        "endpoint": endpoint,
        "data": "Sample data from endpoint",
        "status": "success"
    });
    
    Ok(result)
}