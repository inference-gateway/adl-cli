use inference_gateway_adk::{A2AServerBuilder, AgentBuilder, Config, AgentConfig};
use inference_gateway_sdk::{FunctionObject, Tool, ToolType};
use serde_json::{Value, json};
use std::{env, net::SocketAddr};
use tracing::info;

mod skills;

const VERSION: &str = "{{ .ADL.Metadata.Version }}";
const AGENT_NAME: &str = "{{ .ADL.Metadata.Name }}";
const AGENT_DESCRIPTION: &str = "{{ .ADL.Metadata.Description }}";

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    tracing_subscriber::fmt::init();

    info!("Starting {} agent v{}", AGENT_NAME, VERSION);

    let config = Config::from_env()?;
    
    let agent_config = AgentConfig {
        provider: env::var("PROVIDER").unwrap_or_else(|_| "openai".to_string()),
        model: env::var("MODEL").unwrap_or_else(|_| "gpt-4o-mini".to_string()),
        api_key: env::var("INFERENCE_GATEWAY_KEY").ok(),
        max_tokens: 8192,
        temperature: 0.7,
        ..Default::default()
    };

    let tools = vec![
        Tool {
            r#type: ToolType::Function,
            function: FunctionObject {
                name: "get_current_time".to_string(),
                description: "Get the current time in UTC".to_string(),
                parameters: json!({
                    "type": "object",
                    "properties": {},
                    "required": []
                }),
            },
        },
        Tool {
            r#type: ToolType::Function,
            function: FunctionObject {
                name: "echo_message".to_string(),
                description: "Echo a message back".to_string(),
                parameters: json!({
                    "type": "object",
                    "properties": {
                        "message": {
                            "type": "string",
                            "description": "The message to echo"
                        }
                    },
                    "required": ["message"]
                }),
            },
        },
        Tool {
            r#type: ToolType::Function,
            function: FunctionObject {
                name: "fetch_data".to_string(),
                description: "Fetch data from an endpoint".to_string(),
                parameters: json!({
                    "type": "object",
                    "properties": {
                        "endpoint": {
                            "type": "string",
                            "description": "The endpoint to fetch data from"
                        }
                    },
                    "required": []
                }),
            },
        },
    ];

    let agent_builder = AgentBuilder::new()
        .with_config(&agent_config)
        .with_system_prompt("You are a helpful AI assistant.")
        .with_toolbox(tools)
        .with_function_tool(
            "get_current_time".to_string(),
            |_args: Value| {
                info!("Getting current time");
                let result = json!({
                    "time": "2025-01-02T12:00:00Z",
                    "timestamp": 1735819200
                });
                Ok(result.to_string())
            },
        )
        .with_function_tool(
            "echo_message".to_string(),
            |args: Value| {
                info!("Echoing message");
                
                let message = args.get("message")
                    .and_then(|v| v.as_str())
                    .unwrap_or("No message provided");
                
                let result = json!({
                    "echo": message,
                    "length": message.len()
                });
                Ok(result.to_string())
            },
        )
        .with_async_function_tool(
            "fetch_data".to_string(),
            |args: Value| async move {
                info!("Fetching data");
                
                let endpoint = args.get("endpoint")
                    .and_then(|v| v.as_str())
                    .unwrap_or("default");
                
                tokio::time::sleep(tokio::time::Duration::from_millis(100)).await;
                
                let result = json!({
                    "endpoint": endpoint,
                    "data": "Sample data from endpoint",
                    "status": "success"
                });
                Ok(result.to_string())
            },
        );

    let agent = agent_builder.build().await?;

    let gateway_url = env::var("GATEWAY_URL").unwrap_or_else(|_| "http://localhost:8080".to_string());
    
    let server = A2AServerBuilder::new()
        .with_config(config)
        .with_agent(agent)
        .with_agent_card_from_file(".well-known/agent.json", None)
        .with_gateway_url(gateway_url)
        .build()
        .await?;

    let addr: SocketAddr = "0.0.0.0:8080".parse()?;
    info!("{} agent running on {}", AGENT_NAME, addr);

    if let Err(e) = server.serve(addr).await {
        tracing::error!("Server failed to start: {}", e);
    }

    Ok(())
}
