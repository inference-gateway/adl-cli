package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"

	server "github.com/inference-gateway/adk/server"
	envconfig "github.com/sethvargo/go-envconfig"
	zap "go.uber.org/zap"

	config "{{ .ADL.Spec.Language.Go.Module }}/config"
{{- if .ADL.Spec.Skills }}
	skills "{{ .ADL.Spec.Language.Go.Module }}/skills"
{{- end }}

	logger "{{ .ADL.Spec.Language.Go.Module }}/internal/logger"
{{- range $dep := .ADL.Spec.Dependencies }}
{{- if ne $dep "logger" }}
{{- $depUsed := false }}
{{- range $.ADL.Spec.Skills }}
{{- range .Inject }}
{{- if eq . $dep }}
{{- $depUsed = true }}
{{- end }}
{{- end }}
{{- end }}
{{- if $depUsed }}
	{{ $dep | toCamelCase }} "{{ $.ADL.Spec.Language.Go.Module }}/internal/{{ $dep | toSnakeCase }}"
{{- end }}
{{- end }}
{{- end }}
)


var (
	Version          = "{{ .ADL.Metadata.Version }}"
	AgentName        = "{{ .ADL.Metadata.Name }}"
	AgentDescription = "{{ .ADL.Metadata.Description }}"
)

func main() {
	ctx := context.Background()

	var cfg config.Config
	if err := envconfig.Process(ctx, &cfg); err != nil {
		log.Fatal("failed to load config:", err)
	}

	// Initialize logger
	l, err := logger.NewLogger(ctx, &cfg)
	if err != nil {
		log.Fatal("failed to initialize logger:", err)
	}

	l.Info("starting " + AgentName + " agent (version: " + Version + ", environment: " + cfg.Environment + ")")

	toolBox := server.NewDefaultToolBox()

	{{- if .ADL.Spec.Dependencies }}
	{{- $anyDepUsed := false }}
	{{- range $dep := .ADL.Spec.Dependencies }}
	{{- range $.ADL.Spec.Skills }}
	{{- range .Inject }}
	{{- if eq . $dep }}
	{{- if ne $dep "logger" }}
	{{- $anyDepUsed = true }}
	{{- end }}
	{{- end }}
	{{- end }}
	{{- end }}
	{{- end }}
	{{- if $anyDepUsed }}
	
	// Initialize other dependencies
	{{- end }}
	{{- range $dep := .ADL.Spec.Dependencies }}
	{{- if ne $dep "logger" }}
	{{- $depUsed := false }}
	{{- range $.ADL.Spec.Skills }}
	{{- range .Inject }}
	{{- if eq . $dep }}
	{{- $depUsed = true }}
	{{- end }}
	{{- end }}
	{{- end }}
	{{- if $depUsed }}
	{{ $dep | toCamelCase }}Dep, err := {{ $dep | toCamelCase }}.New{{ $dep | title }}(ctx, &cfg)
	if err != nil {
		l.Fatal("failed to initialize {{ $dep }} dependency: " + err.Error())
	}
	{{- end }}
	{{- end }}
	{{- end }}
	{{- end }}

	{{- range .ADL.Spec.Skills }}

	// Register {{ .Name }} skill
	{{ .Name | toCamelCase }}Skill := skills.New{{ .Name | toPascalCase }}Skill({{ range $index, $dep := .Inject }}{{ if $index }}, {{ end }}{{ if eq $dep "logger" }}l{{ else }}{{ $dep | toCamelCase }}Dep{{ end }}{{ end }})
	toolBox.AddTool({{ .Name | toCamelCase }}Skill)
	l.Info("registered skill: {{ .Name }} ({{ .Description }})")
	{{- end }}

	llmClient, err := server.NewOpenAICompatibleLLMClient(&cfg.A2A.AgentConfig, l)
	if err != nil {
		l.Fatal("failed to create LLM client", zap.Error(err))
	}

	agent, err := server.NewAgentBuilder(l).
		WithConfig(&cfg.A2A.AgentConfig).
		WithLLMClient(llmClient).
		WithToolBox(toolBox).
		WithMaxChatCompletion(cfg.A2A.AgentConfig.MaxChatCompletionIterations).
		WithSystemPrompt(`{{- if and .ADL.Spec.Agent .ADL.Spec.Agent.SystemPrompt }}{{ .ADL.Spec.Agent.SystemPrompt }}{{- else }}You are a helpful AI assistant.{{- end }}`).
		Build()
	if err != nil {
		l.Fatal("failed to create agent", zap.Error(err))
	}

	a2aServer, err := server.NewA2AServerBuilder(cfg.A2A, l).
		WithAgent(agent).
		WithAgentCardFromFile(".well-known/agent.json", map[string]any{
			"name":        AgentName,
			"version":     Version,
			"description": AgentDescription,
			"url":         cfg.A2A.AgentURL,
		}).
		WithDefaultBackgroundTaskHandler().
		WithDefaultStreamingTaskHandler().
		Build()
	if err != nil {
		l.Fatal("failed to create A2A server", zap.Error(err))
	}

	go func() {
		l.Info("starting A2A server", zap.String("port", cfg.A2A.ServerConfig.Port))
		if err := a2aServer.Start(ctx); err != nil {
			l.Fatal("server failed to start", zap.Error(err))
		}
	}()

	l.Info("{{ .ADL.Metadata.Name }} agent running successfully", 
		zap.String("port", cfg.A2A.ServerConfig.Port),
		zap.String("environment", cfg.Environment))

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	l.Info("shutdown signal received, gracefully stopping server...")
	a2aServer.Stop(ctx)
	l.Info("{{ .ADL.Metadata.Name }} agent stopped")
}
