package config

import (
	serverConfig "github.com/inference-gateway/adk/server/config"
)

// Config represents the application configuration
type Config struct {
	// Core application settings
	Environment string `env:"ENVIRONMENT"`
	
	// A2A configuration (all A2A_ prefixed vars)
	A2A serverConfig.Config `env:",prefix=A2A_"`
	{{- if and .ADL.Spec.Artifacts (eq .ADL.Spec.Artifacts.Provider "minio") }}
	
	// Artifacts configuration
	Artifacts ArtifactsConfig `env:",prefix=ARTIFACTS_"`
	{{- end }}
	{{- if .ADL.Spec.Config }}
	
	// Custom configuration sections
	{{- range $sectionName, $sectionConfig := .ADL.Spec.Config }}
	{{ $sectionName | toPascalCase }} {{ $sectionName | toPascalCase }}Config `env:",prefix={{ $sectionName | toUpperSnakeCase }}_"`
	{{- end }}
	{{- end }}
}

{{- if and .ADL.Spec.Artifacts (eq .ADL.Spec.Artifacts.Provider "minio") }}

// ArtifactsConfig represents the artifacts server configuration
type ArtifactsConfig struct {
	MinIO MinIOConfig `env:",prefix=MINIO_"`
}

{{- if eq .ADL.Spec.Artifacts.Provider "minio" }}
// MinIOConfig represents MinIO artifacts server configuration
type MinIOConfig struct {
	Endpoint        string `env:"ENDPOINT,default=localhost:9000"`
	AccessKeyID     string `env:"ACCESS_KEY_ID,default=minioadmin"`
	SecretAccessKey string `env:"SECRET_ACCESS_KEY,default=minioadmin"`
	BucketName      string `env:"BUCKET_NAME,default=artifacts"`
	UseSSL          bool   `env:"USE_SSL,default=false"`
}
{{- end }}
{{- end }}

{{- if .ADL.Spec.Config }}
{{- range $sectionName, $sectionConfig := .ADL.Spec.Config }}

// {{ $sectionName | toPascalCase }}Config represents the {{ $sectionName }} configuration
type {{ $sectionName | toPascalCase }}Config struct {
	{{- range $key, $value := $sectionConfig }}
	{{- $type := "string" }}
	{{- if kindIs "bool" $value }}
		{{- $type = "bool" }}
	{{- else if kindIs "float64" $value }}
		{{- if contains "." (toString $value) }}
			{{- $type = "float64" }}
		{{- else }}
			{{- $type = "int" }}
		{{- end }}
	{{- end }}
	{{ $key | toPascalCase }} {{ $type }} `env:"{{ $key | toUpperSnakeCase }}{{- if $value }},default={{ $value }}{{- end }}"`
	{{- end }}
}
{{- end }}
{{- end }}
