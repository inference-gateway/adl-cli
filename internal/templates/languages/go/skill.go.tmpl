package skills

import (
	"context"
	"fmt"

	server "github.com/inference-gateway/adk/server"
	zap "go.uber.org/zap"
)

// {{ .Name | toPascalCase }}Skill struct holds the skill with logger
type {{ .Name | toPascalCase }}Skill struct {
	logger *zap.Logger
}

// New{{ .Name | toPascalCase }}Skill creates a new {{ .Name }} skill
func New{{ .Name | toPascalCase }}Skill(logger *zap.Logger) server.Tool {
	skill := &{{ .Name | toPascalCase }}Skill{
		logger: logger,
	}
	return server.NewBasicTool(
		"{{ .Name }}",
		"{{ .Description }}",
		map[string]any{
			"type": "object",
			"properties": map[string]any{
				{{- range $key, $value := .Schema.properties }}
				"{{ $key }}": map[string]any{
					{{- range $k, $v := $value }}
					{{- if eq $k "enum" }}
					"{{ $k }}": []string{ {{- range $i, $e := $v }}{{ if $i }}, {{ end }}"{{ $e }}"{{ end -}} },
					{{- else if eq $k "required" }}
					"{{ $k }}": []string{ {{- range $i, $e := $v }}{{ if $i }}, {{ end }}"{{ $e }}"{{ end -}} },
					{{- else if eq $k "properties" }}
					"{{ $k }}": {{ $v | toGoMap }},
					{{- else if eq $k "items" }}
					"{{ $k }}": {{ $v | toGoMap }},
					{{- else }}
					"{{ $k }}": {{ $v | toJson }},
					{{- end }}
					{{- end }}
				},
				{{- end }}
			},
			{{- if .Schema.required }}
			"required": []string{ {{- range $i, $field := .Schema.required }}{{ if $i }}, {{ end }}"{{ $field }}"{{ end -}} },
			{{- end }}
		},
		skill.{{ .Name | toPascalCase }}Handler,
	)
}

// {{ .Name | toPascalCase }}Handler handles the {{ .Name }} skill execution
func (s *{{ .Name | toPascalCase }}Skill) {{ .Name | toPascalCase }}Handler(ctx context.Context, args map[string]any) (string, error) {
	// TODO: Implement {{ .Name }} logic
	// {{ .Description }}

	// Log the incoming request
	s.logger.Info("Processing {{ .Name }} request",
		zap.Any("args", args))
	
	// Extract parameters from args
	{{- range $key, $value := .Schema.properties }}
	{{- if eq $value.type "string" }}
	// {{ $key }} := args["{{ $key }}"].(string)
	{{- else if eq $value.type "number" }}
	// {{ $key }} := args["{{ $key }}"].(float64)
	{{- else if eq $value.type "integer" }}
	// {{ $key }} := args["{{ $key }}"].(int)
	{{- else if eq $value.type "boolean" }}
	// {{ $key }} := args["{{ $key }}"].(bool)
	{{- else }}
	// {{ $key }} := args["{{ $key }}"]
	{{- end }}
	{{- end }}
	
	return fmt.Sprintf(`{"result": "TODO: Implement {{ .Name }} logic", "input": %+v}`, args), nil
}
