version: '3'

vars:
  APP_NAME: {{ .ADL.Metadata.Name }}
  VERSION: {{ .ADL.Metadata.Version }}

tasks:
  generate:
    desc: Generate code from ADL
    cmd: {{ .GenerateCommand }}

  build:
    desc: Build the application
    cmd: {{- if eq .Language "go" }} go build -o bin/{{`{{.APP_NAME}}`}} .
    {{- else if eq .Language "rust" }} cargo build --release
    {{- else if eq .Language "typescript" }} npm run build
    {{- end }}

  run:
    desc: Run the application in development mode
    cmd: {{- if eq .Language "go" }} go run .
    {{- else if eq .Language "rust" }} cargo run
    {{- else if eq .Language "typescript" }} npm run dev
    {{- end }}
    env:
      A2A_DEBUG: true
      A2A_SERVER_PORT: {{ .ADL.Spec.Server.Port | default 8080 }}

  test:
    desc: Run tests
    cmd: {{- if eq .Language "go" }} go test -v ./...
    {{- else if eq .Language "rust" }} cargo test
    {{- else if eq .Language "typescript" }} npm test
    {{- end }}

  test:cover:
    desc: Run tests with coverage
    cmd: {{- if eq .Language "go" }} go test -v -cover ./...
    {{- else if eq .Language "rust" }} cargo tarpaulin
    {{- else if eq .Language "typescript" }} npm run test:coverage
    {{- end }}

  fmt:
    desc: Format code
    cmd: {{- if eq .Language "go" }} go fmt ./...
    {{- else if eq .Language "rust" }} cargo fmt
    {{- else if eq .Language "typescript" }} npm run format
    {{- end }}

  lint:
    desc: Run linter
    cmd: {{- if eq .Language "go" }} golangci-lint run
    {{- else if eq .Language "rust" }} cargo clippy
    {{- else if eq .Language "typescript" }} npm run lint
    {{- end }}

  clean:
    desc: Clean build artifacts
    cmd: {{- if eq .Language "go" }} rm -rf bin/
    {{- else if eq .Language "rust" }} cargo clean
    {{- else if eq .Language "typescript" }} rm -rf dist/
    {{- end }}

  docker:build:
    desc: Build Docker image
    cmd: docker build -t {{`{{.APP_NAME}}`}}:{{`{{.VERSION}}`}} .

{{- if .ADL.Spec.Deployment }}
{{- if eq .ADL.Spec.Deployment.Type "kubernetes" }}
  deploy:
    desc: Deploy to Kubernetes
    cmd: kubectl apply -f k8s/
{{- else if eq .ADL.Spec.Deployment.Type "cloudrun" }}
  deploy:
    desc: Deploy to Google Cloud Run
    cmd: |
      chmod +x cloudrun/deploy.sh
      ./cloudrun/deploy.sh
{{- end }}
{{- end }}
