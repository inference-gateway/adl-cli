# AGENTS.md

This file describes the agents available in this A2A (Agent-to-Agent) system.

## Agent Overview

### {{ .ADL.Metadata.Name }}
**Version**: {{ .ADL.Metadata.Version }}  
**Description**: {{ .ADL.Metadata.Description }}

This agent is built using the Agent Definition Language (ADL) and provides A2A communication capabilities.

## Agent Capabilities

{{ if .ADL.Spec.Capabilities }}
{{ if .ADL.Spec.Capabilities.Streaming }}
- **Streaming**: ✅ Real-time response streaming supported
{{ else }}
- **Streaming**: ❌ Real-time response streaming not supported
{{ end }}
{{ if .ADL.Spec.Capabilities.PushNotifications }}
- **Push Notifications**: ✅ Server-sent events for real-time updates
{{ else }}
- **Push Notifications**: ❌ Server-sent events not supported
{{ end }}
{{ if .ADL.Spec.Capabilities.StateTransitionHistory }}
- **State History**: ✅ Tracks agent state transitions over time
{{ else }}
- **State History**: ❌ State transition history not tracked
{{ end }}
{{ else }}
- **Streaming**: ❌ Real-time response streaming not supported
- **Push Notifications**: ❌ Server-sent events not supported
- **State History**: ❌ State transition history not tracked
{{ end }}

## AI Configuration

{{ if .ADL.Spec.Agent }}
{{ if .ADL.Spec.Agent.Provider }}
**AI Provider**: {{ .ADL.Spec.Agent.Provider }}
{{ if .ADL.Spec.Agent.Model }}
**Model**: {{ .ADL.Spec.Agent.Model }}
{{ end }}
{{ end }}

{{ if .ADL.Spec.Agent.SystemPrompt }}
**System Prompt**: {{ .ADL.Spec.Agent.SystemPrompt }}
{{ end }}

**Configuration:**
{{ if .ADL.Spec.Agent.MaxTokens }}
- Max Tokens: {{ .ADL.Spec.Agent.MaxTokens }}
{{ end }}
{{ if .ADL.Spec.Agent.Temperature }}
- Temperature: {{ .ADL.Spec.Agent.Temperature }}
{{ end }}
{{ else }}
No AI provider configured - this is a minimal agent.
{{ end }}

## Skills

{{ if .ADL.Spec.Skills }}
This agent provides {{ len .ADL.Spec.Skills }} skills:

{{ range .ADL.Spec.Skills }}
### {{ .Name }}
- **Description**: {{ .Description }}
{{ if .Tags }}- **Tags**: {{ join ", " .Tags }}{{ end }}
- **Input Schema**: Defined in agent configuration
- **Output Schema**: Defined in agent configuration

{{ end }}
{{ else }}
No skills defined - this agent provides basic A2A communication without specialized capabilities.
{{ end }}

## Server Configuration

**Port**: {{ .ADL.Spec.Server.Port }}
{{ if .ADL.Spec.Server.Debug }}
**Debug Mode**: ✅ Enabled
{{ else }}
**Debug Mode**: ❌ Disabled
{{ end }}

{{ if .ADL.Spec.Server.Auth }}
{{ if .ADL.Spec.Server.Auth.Enabled }}
**Authentication**: ✅ Required
{{ else }}
**Authentication**: ❌ Not required
{{ end }}
{{ else }}
**Authentication**: ❌ Not required
{{ end }}

## API Endpoints

The agent exposes the following HTTP endpoints:

- `GET /.well-known/agent-card.json` - Agent metadata and capabilities
- `POST /skills/{skill_name}` - Execute a specific skill{{ if .ADL.Spec.Capabilities.Streaming }}
- `GET /skills/{skill_name}/stream` - Stream skill execution results{{ end }}{{ if .ADL.Spec.Capabilities.PushNotifications }}
- `GET /events` - Server-sent events for notifications{{ end }}{{ if .ADL.Spec.Capabilities.StateTransitionHistory }}
- `GET /history` - Retrieve agent state transition history{{ end }}

## Environment Setup

### Required Environment Variables

Key environment variables you'll need to configure:
{{ if .ADL.Spec.Agent }}
{{ if .ADL.Spec.Agent.Provider }}
- `{{ upper .ADL.Spec.Agent.Provider }}_API_KEY` - API key for {{ .ADL.Spec.Agent.Provider }}
{{ end }}
{{ end }}
- `PORT` - Server port (default: {{ .ADL.Spec.Server.Port }})

### Development Environment
{{ if .ADL.Spec.Sandbox }}
{{ if .ADL.Spec.Sandbox.Flox }}
**Flox Environment**: ✅ Configured for reproducible development setup
{{ end }}
{{ if .ADL.Spec.Sandbox.DevContainer }}
**DevContainer**: ✅ VS Code DevContainer configuration available
{{ end }}
{{ end }}

## Usage

### Starting the Agent
{{ if eq .Language "go" }}
```bash
# Install dependencies
go mod download

# Run the agent
go run main.go

# Or use Task
task run
```
{{ else if eq .Language "rust" }}
```bash
# Install dependencies  
cargo build

# Run the agent
cargo run

# Or use Task
task run
```
{{ else if eq .Language "typescript" }}
```bash
# Install dependencies
npm install

# Run the agent
npm start

# Or use Task
task run
```
{{ end }}

### Communicating with the Agent

The agent implements the A2A protocol and can be communicated with via HTTP requests:

```bash
# Get agent information
curl http://localhost:{{ .ADL.Spec.Server.Port }}/.well-known/agent-card.json

{{ if .ADL.Spec.Skills }}
{{ range .ADL.Spec.Skills }}
# Execute {{ .Name }} skill
curl -X POST http://localhost:{{ $.ADL.Spec.Server.Port }}/skills/{{ .Name }} \
  -H "Content-Type: application/json" \
  -d '{"input": "your_input_here"}'
{{ end }}
{{ end }}
```

## Deployment

{{ if .ADL.Spec.Deployment }}
{{ if eq .ADL.Spec.Deployment.Type "kubernetes" }}
**Deployment Type**: Kubernetes
- Kubernetes manifests available in `k8s/` directory
- Use `kubectl apply -f k8s/` to deploy
{{ end }}
{{ else }}
**Deployment Type**: Manual
- Build and run the agent binary directly
- Use provided Dockerfile for containerized deployment
{{ end }}

{{ if eq .Language "go" }}
### Docker Deployment
```bash
# Build image
docker build -t {{ .ADL.Metadata.Name }} .

# Run container
docker run -p {{ .ADL.Spec.Server.Port }}:{{ .ADL.Spec.Server.Port }} {{ .ADL.Metadata.Name }}
```
{{ else if eq .Language "rust" }}
### Docker Deployment
```bash
# Build image
docker build -t {{ .ADL.Metadata.Name }} .

# Run container  
docker run -p {{ .ADL.Spec.Server.Port }}:{{ .ADL.Spec.Server.Port }} {{ .ADL.Metadata.Name }}
```
{{ else if eq .Language "typescript" }}
### Docker Deployment
```bash
# Build image
docker build -t {{ .ADL.Metadata.Name }} .

# Run container
docker run -p {{ .ADL.Spec.Server.Port }}:{{ .ADL.Spec.Server.Port }} {{ .ADL.Metadata.Name }}
```
{{ end }}

## Development

### Project Structure
{{ if eq .Language "go" }}
```
.
├── main.go              # Server entry point
├── skills/              # Business logic skills
{{ range .ADL.Spec.Skills }}
│   └── {{ .Name }}.go   # {{ .Description }}
{{ end }}
├── .well-known/         # Agent configuration
│   └── agent-card.json  # Agent metadata
├── go.mod               # Go module definition
└── README.md            # Project documentation
```
{{ else if eq .Language "rust" }}
```
.
├── src/
│   ├── main.rs          # Server entry point
│   └── skills/          # Business logic skills
{{ range .ADL.Spec.Skills }}
│       ├── {{ .Name }}.rs # {{ .Description }}
{{ end }}
│       └── mod.rs       # Skills module
├── .well-known/         # Agent configuration  
│   └── agent-card.json  # Agent metadata
├── Cargo.toml           # Rust package definition
└── README.md            # Project documentation
```
{{ else if eq .Language "typescript" }}
```
.
├── src/
│   ├── index.ts         # Server entry point
│   └── skills/          # Business logic skills
{{ range .ADL.Spec.Skills }}
│       └── {{ .Name }}.ts # {{ .Description }}
{{ end }}
├── .well-known/         # Agent configuration
│   └── agent-card.json  # Agent metadata
├── package.json         # Node.js package definition
├── tsconfig.json        # TypeScript configuration
└── README.md            # Project documentation
```
{{ end }}

### Testing
{{ if eq .Language "go" }}
```bash
# Run tests
task test
go test ./...

# Run with coverage
task test:coverage
```
{{ else if eq .Language "rust" }}
```bash
# Run tests
task test
cargo test

# Run with coverage
task test:coverage
```
{{ else if eq .Language "typescript" }}
```bash
# Run tests
task test
npm test

# Run with coverage
task test:coverage
```
{{ end }}

## Contributing

1. Implement business logic in skill files (replace TODO placeholders)
2. Add comprehensive tests for new functionality
3. Follow the established code patterns and conventions
4. Ensure proper error handling throughout
5. Update documentation as needed

## Agent Metadata

This agent was generated using ADL CLI v{{ .ADL.Metadata.Version }} with the following configuration:

- **Language**: {{ title .Language }}
- **Template**: Minimal A2A Agent
- **ADL Version**: {{ .ADL.APIVersion }}

---

For more information about A2A agents and the ADL specification, visit the [ADL CLI documentation](https://github.com/inference-gateway/adl-cli).
