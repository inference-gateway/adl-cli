apiVersion: adl.dev/v1
kind: Agent
metadata:
  name: go-agent
  description: "Minimal agent with basic functionality"
  version: "0.1.0"
spec:
  capabilities:
    streaming: true
    pushNotifications: true
    stateTransitionHistory: true
  card:
    protocolVersion: "0.3.0"
    preferredTransport: "JSONRPC"
    defaultInputModes: ["text", "voice"]
    defaultOutputModes: ["text", "audio"]
    url: "https://my-agent.example.com:8443"
    documentationUrl: "https://github.com/company/go-agent/docs"
    iconUrl: "https://github.com/company/go-agent/icon.png"
  agent:
    provider: deepseek
    model: deepseek-chat
    systemPrompt: |
      You are are an helpful assistant.
      Always prioritize security, accuracy, and compliance in your responses.
      Log all interactions for audit purposes.
    maxTokens: 8192
    temperature: 0.3
  config:
    database:
      connectionString: "postgresql://user:pass@localhost:5432/company_db"
      maxConnections: "10"
      timeout: "30s"
      sslMode: "require"
    notifications:
      slackWebhook: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
      emailApiKey: "your-sendgrid-api-key"
      retryAttempts: "3"
      defaultTimeout: "10s"
    reporting:
      outputPath: "/tmp/reports"
      templateDir: "/app/templates"
      maxFileSizeMB: "50"
      retention: "30d"
  services:
    database:
      type: service
      interface: DatabaseService
      factory: NewDatabaseService
      description: PostgreSQL database service for company data queries
    notifications:
      type: service
      interface: NotificationService
      factory: NewNotificationService
      description: Multi-channel notification service for alerts and communications
    reporting:
      type: service
      interface: ReportingService
      factory: NewReportingService
      description: Business report generation service with multiple output formats
  skills:
    - id: query_database
      name: query_database
      description: "Query the company database with proper authentication"
      tags: ["database", "query", "data"]
      inject:
        - logger
        - database
      schema:
        type: object
        properties:
          query:
            type: string
            description: "SQL query to execute"
          table:
            type: string
            description: "Table name to query"
          limit:
            type: integer
            description: "Maximum number of results"
            maximum: 1000
        required: [query, table]
    - id: send_notification
      name: send_notification
      description: "Send notifications to users or teams"
      tags: ["notification", "communication", "alert"]
      inject:
        - logger
        - notifications
      schema:
        type: object
        properties:
          recipient:
            type: string
            description: "Recipient email or team name"
          message:
            type: string
            description: "Notification message"
          priority:
            type: string
            description: "Priority level"
            enum: ["low", "medium", "high", "critical"]
          channel:
            type: string
            description: "Notification channel"
            enum: ["email", "slack", "teams", "webhook"]
        required: [recipient, message, priority, channel]
    - id: generate_report
      name: generate_report
      description: "Generate business reports based on data analysis"
      tags: ["report", "analytics", "business"]
      inject:
        - logger
        - database
        - reporting
      schema:
        type: object
        properties:
          report_type:
            type: string
            description: "Type of report to generate"
            enum: ["sales", "performance", "compliance", "security"]
          date_range:
            type: object
            properties:
              start:
                type: string
                format: date
              end:
                type: string
                format: date
          format:
            type: string
            description: "Output format"
            enum: ["pdf", "excel", "json", "html"]
        required: [report_type, date_range, format]
  server:
    port: 8443
    debug: false
    auth:
      enabled: true
  language:
    go:
      module: "github.com/inference-gateway/adl-cli/test-output"
      version: "1.25"
  scm:
    provider: github
    url: "https://github.com/inference-gateway/adl-cli"
    github_app: true
    issue_templates: true
  sandbox:
    flox:
      enabled: true
    devcontainer:
      enabled: false
  # hooks:
  #   post:
  #     - "go mod tidy"
  #     - "go generate ./..."
